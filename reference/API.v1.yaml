openapi: 3.0.0
info:
  title: API
  version: '1.0'
  description: 'Api de ganatrade - School Project'
  contact:
    name: Ganatrade
    url: 'https://www.ganatrade.xyz/'
    email: fake@ganatrade.xyz
servers:
  - url: 'https://api.ganatrade.xyz/'
    description: Prod
  - url: 'https://beta.api.ganatrade.xyz'
    description: Beta
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: '142'
                    username: AliceS
                    password: 123456789CeciNestPasSecuriser
                    rank: trader
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    birthdate: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: "13"
                    username: Rebaker
                    password: MichelJeTaime
                    rank: trader
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    birthdate: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
    delete:
      summary: ''
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
        '404':
          description: User with this userId Not Found
      description: To delete an user.
  /users:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: "12"
                    username: Bob3lettres
                    password: qwertyuiop
                    rank: admin
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    birthdate: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    parameters: []
    get:
      summary: ''
      operationId: get-users
      responses:
        '200':
          description: OK
      description: Get all users to AdminControlPanel
components:
  schemas:
    User:
      description: ''
      type: object
      properties:
        id:
          type: string
          minLength: 1
        username:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
        rank:
          type: string
          minLength: 1
        birthdate:
          type: string
          minLength: 1
        lastname:
          type: string
          minLength: 1
        firstname:
          type: string
          minLength: 1
        address:
          type: object
          properties:
            street:
              type: string
              minLength: 1
            zipcode:
              type: integer
            City:
              type: string
              minLength: 1
        phone:
          type: string
          minLength: 1
        avatar:
          type: string
          minLength: 1
        private_profile:
          type: boolean
        delete_profile:
          type: boolean
        last_login:
          type: string
          minLength: 1
        average_answer:
          type: string
          minLength: 1
      required:
        - id
        - username
        - email
        - password
        - rank
        - birthdate
      title: ''
    Offer:
      description: ''
      type: object
      x-examples:
        Azzam Yatch:
          id: vYvZjac2FyzlcpZi39pr
          user_id: LcpjafEgrwtAXdwjLTPh
          title: 'Vend le yacht Azzam pour 537,000,000$'
          product:
            name: Azzam yacht
            condition: En cash seulement.
          description: L’Azzam est un yacht de luxe battant pavillon des Émirats arabes unis. Il n'est plus le plus grand yacht du monde détrôné par le REV OCEAN.
          pictures: 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/Azzam_bei_L%C3%BCrssen.JPG/280px-Azzam_bei_L%C3%BCrssen.JPG'
          categories: string
          tags: string
          trade:
            method: cash en liasse de 100$
            target: Les petits bourges des beaux quartiers
            estimation: '537,000,000$'
            place: Monaco
            radius: 200Km
          views: '516544'
          saves: '5155'
          is_active: 'true'
          status: 'true'
          created_at: '24-11-2020-11:39:00-UTC+1'
          updated_at: '24-11-2020-11:39:00-UTC+1'
      title: ''
      properties:
        id:
          type: string
          minLength: 1
        user_id:
          type: integer
        title:
          type: string
          minLength: 1
        product:
          type: object
          required:
            - name
            - condition
          properties:
            name:
              type: string
              minLength: 1
            condition:
              type: string
              minLength: 1
              description: 'Condition d''echange, offres d''echange accepte ...'
        description:
          type: string
          minLength: 1
        pictures:
          type: string
          minLength: 1
        categories:
          type: string
          minLength: 1
        tags:
          type: array
          items: {}
        trade:
          type: object
          required:
            - method
          properties:
            method:
              type: string
              minLength: 1
            target:
              type: string
              minLength: 1
            estimation:
              type: string
              minLength: 1
            place:
              type: string
              minLength: 1
            radius:
              type: integer
        views:
          type: integer
        saves:
          type: string
          minLength: 1
          description: Listes des personnes qui suivent l'offre
        is_active:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        updated_at:
          type: string
          minLength: 1
      required:
        - id
        - title
        - product
        - categories
        - trade
        - saves
        - is_active
        - status
        - created_at
        - updated_at
  securitySchemes: {}
security: []
